#!/bin/bash

set -e
set -o pipefail

# Ensure that the GITHUB_TOKEN secret is included
if [[ -z "$GITHUB_TOKEN" ]]; then
  echo "Set the GITHUB_TOKEN env variable."
  exit 1
fi

FILE=${INPUT_FILE}
REPOSITORY=${INPUT_REPOSITORY}
RELEASE_TAG=${INPUT_RELEASE_TAG}
GITHUB="https://api.github.com"
AUTH_HEADER="Authorization: token ${GITHUB_TOKEN}"

# Ensure that the file path is present
if [[ -z "$FILE" ]]; then
  echo "Pass the name of the asset to download"
  exit 1
fi

# Repository to use, if not set == current repository
if [[ -z "$REPOSITORY" ]]; then
  REPOSITORY=${GITHUB_REPOSITORY}
fi

# Release tag to use, if not set == latest
if [[ -z "$RELEASE_TAG" ]]; then
  # Github should return the latest release first.
  parser=".[0].assets | map(select(.name == \"$FILE\"))[0].id"
else
  parser=". | map(select(.tag_name == \"$RELEASE_TAG\"))[0].assets | map(select(.name == \"$FILE\"))[0].id"
fi;

asset_id=`curl -H "${AUTH_HEADER}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -s $GITHUB/repos/$REPOSITORY/releases | jq "$parser"`
if [ "$asset_id" = "null" ]; then
  echo "ERROR: asset id not found"
  exit 1
fi;

curl \
  -L \
  -H "${AUTH_HEADER}" \
  -H "Accept:application/octet-stream" \
  -o "${FILE}" \
  "${GITHUB}/repos/${REPOSITORY}/releases/assets/${asset_id}"